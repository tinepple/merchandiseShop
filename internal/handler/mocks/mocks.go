// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handler/deps.go
//
// Generated by this command:
//
//	mockgen -source=internal/handler/deps.go -destination=internal/handler/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	storage "MerchandiseShop/internal/storage"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreatePurchase mocks base method.
func (m *MockStorage) CreatePurchase(ctx context.Context, userID, itemID, newBalance int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePurchase", ctx, userID, itemID, newBalance)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePurchase indicates an expected call of CreatePurchase.
func (mr *MockStorageMockRecorder) CreatePurchase(ctx, userID, itemID, newBalance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePurchase", reflect.TypeOf((*MockStorage)(nil).CreatePurchase), ctx, userID, itemID, newBalance)
}

// CreateTransaction mocks base method.
func (m *MockStorage) CreateTransaction(ctx context.Context, transaction storage.Transaction, NewBalanceUserFrom, NewBalanceUserTo int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, transaction, NewBalanceUserFrom, NewBalanceUserTo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockStorageMockRecorder) CreateTransaction(ctx, transaction, NewBalanceUserFrom, NewBalanceUserTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStorage)(nil).CreateTransaction), ctx, transaction, NewBalanceUserFrom, NewBalanceUserTo)
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(ctx context.Context, username, password string) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username, password)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), ctx, username, password)
}

// GetItem mocks base method.
func (m *MockStorage) GetItem(ctx context.Context, name string) (storage.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, name)
	ret0, _ := ret[0].(storage.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockStorageMockRecorder) GetItem(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockStorage)(nil).GetItem), ctx, name)
}

// GetPurchasesByUserID mocks base method.
func (m *MockStorage) GetPurchasesByUserID(ctx context.Context, userID int) ([]storage.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchasesByUserID", ctx, userID)
	ret0, _ := ret[0].([]storage.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchasesByUserID indicates an expected call of GetPurchasesByUserID.
func (mr *MockStorageMockRecorder) GetPurchasesByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchasesByUserID", reflect.TypeOf((*MockStorage)(nil).GetPurchasesByUserID), ctx, userID)
}

// GetTransactionsByUserID mocks base method.
func (m *MockStorage) GetTransactionsByUserID(ctx context.Context, userID int) ([]storage.CoinsHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByUserID", ctx, userID)
	ret0, _ := ret[0].([]storage.CoinsHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByUserID indicates an expected call of GetTransactionsByUserID.
func (mr *MockStorageMockRecorder) GetTransactionsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByUserID", reflect.TypeOf((*MockStorage)(nil).GetTransactionsByUserID), ctx, userID)
}

// GetUserBalance mocks base method.
func (m *MockStorage) GetUserBalance(ctx context.Context, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockStorageMockRecorder) GetUserBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockStorage)(nil).GetUserBalance), ctx, userID)
}

// GetUserByUsername mocks base method.
func (m *MockStorage) GetUserByUsername(ctx context.Context, userName string) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, userName)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStorageMockRecorder) GetUserByUsername(ctx, userName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStorage)(nil).GetUserByUsername), ctx, userName)
}

// MockauthService is a mock of authService interface.
type MockauthService struct {
	ctrl     *gomock.Controller
	recorder *MockauthServiceMockRecorder
	isgomock struct{}
}

// MockauthServiceMockRecorder is the mock recorder for MockauthService.
type MockauthServiceMockRecorder struct {
	mock *MockauthService
}

// NewMockauthService creates a new mock instance.
func NewMockauthService(ctrl *gomock.Controller) *MockauthService {
	mock := &MockauthService{ctrl: ctrl}
	mock.recorder = &MockauthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthService) EXPECT() *MockauthServiceMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockauthService) GenerateJWT(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockauthServiceMockRecorder) GenerateJWT(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockauthService)(nil).GenerateJWT), userID)
}

// GetUserID mocks base method.
func (m *MockauthService) GetUserID(jwtToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", jwtToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockauthServiceMockRecorder) GetUserID(jwtToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockauthService)(nil).GetUserID), jwtToken)
}
